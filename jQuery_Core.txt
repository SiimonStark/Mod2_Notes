##Link to Study Guide:

  https://learn.jquery.com/using-jquery-core/

//========================================================
//========================================================

##$ vs $()

  • Methods called on jQuery selections are in the $.fn namespace, and automatically receive and return the selection as this.

  • Methods in the $ namespace are generally utility-type methods, and do not work with selections; they are not automatically passed any arguments, and their return value will vary.

    – Object methods tend to be .each()
    – While utility methods will look like $.each()
        – Which is a method that isn’t called on a selection

//========================================================
//========================================================

##$(document).ready()

  – Code included in $( document ).ready() will only run once the page DOM is ready.

  – You can use a named function in place of the anonymous function

  – Code included in $( window ).on( “load”,  function() {…}) will only run once the entire page including images has loaded.

  – The shorthand is $(function() {…}) , it’s not recommended to use this form as a beginner!

//========================================================
//========================================================

##Avoiding Conflicts with Other Libraries

  --Putting jQuery in No-Conflict Mode--
    When you put jQuery into no-conflict mode, you have the option of assigning a new variable name to replace the $ alias.
        <!-- Putting jQuery into no-conflict mode. -->
        var $j = jQuery.noConflict();
        // $j is now an alias to the jQuery function; creating the new alias is optional.
        
        $j(document).ready(function() {
            $j( "div" ).hid
        });/ 
        OR, this preferred solution ⤵️ Which passes the $ as an argument.
        jQuery.noConflict();
        jQuery( document ).ready(function( $ ) {
            // You can use the locally-scoped $ in here as an alias to jQuery.
            $( "div" ).hide();
        });

  --Including jQuery Before Other Libraries--
    If you run your jQuery file before other libraries you don’t have to use the above methods, rather you can use:
        // Use full jQuery function name to reference jQuery.
            jQuery( document ).ready(function() {
            jQuery( "div" ).hide();
        });

//========================================================
//========================================================

##Attributes

--The .attr() method acts as both a getter and a setter.--

    – As a Setter: it can accept either a key & a value pair or an Object w/ 1 or more pairs.
        $( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
        $( "a" ).attr({
            title: "all titles are the same too!",
            href: "somethingNew.html"
        });

    – As a Getter: it returns the value for the first element.
        $( "a" ).attr( "href" ); 
        // Returns the href for the first a element in the document

//=======================================================
//=======================================================

##Selecting Elements

  --jQuery supports most CSS3 selectors, as well as non-standard selectors. Making it really useful.--

--Selecting Elements by ID--
    $( "#myId" ); // Note IDs must be unique per page.

--Selecting Elements by Class Name--
	$( ".myClass" );

--Selecting Elements by Attribute--
    $( "input[name='first_name']" );

--Selecting Elements by Compound CSS Selector--
    $( "#contents ul.people li" );

--Selecting Elements with a Comma-separated List of Selectors--
    $( "div.myClass, ul.people" );

--Pseudo-Selectors--
    $( "a.external:first" );
    $( "tr:odd" );
 
    // Select all input-like elements in a form (more on this below).
    $( "#myForm :input" );
    $( "div:visible" );
 
    // All except the first three divs.
    $( "div:gt(2)" );
 
    // All currently animated divs.
    $( "div:animated" );

    --Note--
    -- :visible :hidden, jQuery tests the visibility of an element in CSS, to see if the element's (x&&y) < 0. 
    -- This test does not work with `<tr>` elements.
    -- Elements that have not yet been added to the DOM will be considered hidden and do apply to this rule.

--Choosing Selectors--
    - K.I.S.S. Keep It Simple Stupid, less is more.

    -- Does My Selection Contain Any Elements?--
        Best way to determine that is to check using .length property:
            // Testing whether a selection contains elements.
            if ( $( "div.foo" ).length ) {
            ...
            }
        -This will return how many elements have been selected, or evaluate to falsey with a value of 0.

    --Saving Selections--

      - jQuery doesn't cache elements for you
      - If you've made a selection that you might need to make again
      - You should save the selection in a variable rather than making the selection repeatedly.
        var divs = $( "div" );
      -Once the selection is stored in a variable, you can call jQuery methods on the variable just like you would have called them on the original selection.

      --Stored selections don't magically update when the DOM changes.--
        - If elements are added to the page later, you'll have to repeat the selection or otherwise add them to the selection stored in the variable.

    --Refining/Filtering Selections--

      -jQuery has several methods for filtering selections:

        // Refining selections.
        $( "div.foo" ).has( "p" );         // div.foo elements that contain <p> tags
        $( "h1" ).not( ".bar" );           // h1 elements that don't have a class of bar
        $( "ul li" ).filter( ".current" ); // unordered list items with class of current
        $( "ul li" ).first();              // just the first unordered list item
        $( "ul li" ).eq( 5 );              // the sixth
      
    --Selecting Form Elements--

      - jQuery offers pseudo-selectors that help find form elements.
      - jQuery provides pseudo selectors to select form-specific elements according to their type:
      https://learn.jquery.com/using-jquery-core/selecting-elements/#selecting-form-elements

        :checked
          $( "form :checked" );
        :disabled
          $( "form :disabled" );
        :enabled
          $( "form :enabled" );
        :input
          $( "form :input" );
        :selected
          $( "form :selected" );

//========================================================
//========================================================

##Working with Selections

--Getters & Setters--

  --Some jQuery methods can be used to either assign or read some value on a selection--

  - When the method is called with a value as an argument, it's referred to as a setter because it sets (or assigns) that value
    - Setters affect all elements in a selection
      // The .html() method sets all the h1 elements' html to be "hello world":
      $( "h1" ).html( "hello world" );
    --Setters return a jQuery object, allowing you to continue calling jQuery methods on your selection.--

  - When the method is called with no argument, it gets (or reads) the value of the element
    - Getters return the requested value only for the first element in the selection.
      // The .html() method returns the html of the first h1 element:
      $( "h1" ).html();
      // > "hello world"
    --Getters return whatever they were asked to get, so you can't continue to call jQuery methods on the value returned by the getter.--
      // Attempting to call a jQuery method after calling a getter.
      // This will NOT work:
       $( "h1" ).html().addClass( "test" );

--Chaining--

  - If you call a method on a selection and that method returns a jQuery object, you can continue to call jQuery methods on the object without pausing for a semicolon
    $( "#content" )
      .find( "h3" )
      .eq( 2 )
      .html( "new text for the third h3!" );

  - jQuery also provides the .end() method to get back to the original selection should you change the selection in the middle of a chain:

  --!!Make sure not to get crazy with the chains. It'll make debugging a nightmare!!--

//========================================================
//========================================================

##Manipulating Elements

  - Link:
    http://api.jquery.com/category/manipulation/

--Getting & Setting Info About Elements--

  - There are many ways to change an existing element
  - jQuery offers simple, cross-browser methods for these sorts of manipulations

    .html() – Get or set the HTML contents.
    .text() – Get or set the text contents; HTML will be stripped.
    .attr() – Get or set the value of the provided attribute.
    .width() – Get or set the width in pixels of the first element in the selection as an integer.
    .height() – Get or set the height in pixels of the first element in the selection as an integer.
    .position() – Get an object with position information for the first element in the selection, relative to its first positioned ancestor. This is a getter only.
    .val() – Get or set the value of form elements.
  
  - Changing things about elements is trivial, but remember that the change will affect all elements in the selection. 
  - If you just want to change one element, be sure to specify that in the selection before calling a setter method.
    // Changing the HTML of an element.
    $( "#myDiv p:first" ).html( "New <strong>first</strong> paragraph!" );

--Moving, Copying, and Removing Elements--

  -When moving elements there are generally 2 approaches:
    - Place the selected element(s) relative to another element.
    - Place an element relative to the selected element(s).

  - .insertAfter() method 
    places the selected element(s) after the element provided as an argument
  - .after() method 
    places the element provided as an argument after the selected element.
  - Several other methods follow this pattern: 
    .insertBefore() and .before(), .appendTo() and .append(), and .prependTo() and .prepend()

  - The method that makes the most sense will depend on what elements are selected, 
    and whether you need to store a reference to the elements you're adding to the page.

      // Moving elements using different approaches.
 
      // Make the first list item the last list item:
      var li = $( "#myList li:first" ).appendTo( "#myList" );
      
      // Another approach to the same problem:
      $( "#myList" ).append( $( "#myList li:first" ) );
      
      // Note that there's no way to access the list item
      // that we moved, as this returns the list itself.

--Cloning Elements--

  - Sometimes a copy of the element is needed instead. 

  - In this case, use .clone() first:
    // Making a copy of an element. 
    // Copy the first list item to the end of the list:
    $( "#myList li:first" ).clone().appendTo( "#myList" );

    --If you need to copy related data and events,--
    --Be sure to pass true as an argument to .clone().--


--Removing Elements--

  --There are two ways to remove elements from the page:--

    - .remove() when you want to permanently remove the selection from the page

    - .detach() if you need the data and events to persist
      - Like .remove(), it returns the selection, but it also maintains the data and events associated with the selection, so you can restore the selection to the page at a later time.

    -If you want to leave the element on the page but remove its contents:
      - Use .empty() to dispose of the element's inner HTML.

--Creating New Elements--

  - jQuery allows us to elegantly using the $() method
    (which is also used in making selections)
      // Creating new elements from an HTML string.
      $( "<p>This is a new paragraph</p>" );
      $( "<li class=\"new\">new list item</li>" );
      // Creating a new element with an attribute object.
      $( "<a/>", {
          html: "This is a <strong>new</strong> link",
          "class": "new",
          href: "foo.html"
      });
      //--class is "" because it is a reserved word--
      
    --It's recommended to set the created element to variable--

    - You can create an element while you're adding it to the page.
      - But, you can't reference the newly created item.
        $( "ul" ).append( "<li>list item</li>" );

  --If you're adding many elements to the same container--
    - then you'll want to concatenate all the HTML into a single string, 
    and then append that string to the container instead of appending the elements one at a time
    - Use an array to gather all the pieces together, then join them into a single string for appending:
      var myItems = [];
      var myList = $( "#myList" );
      
      for ( var i = 0; i < 100; i++ ) {
          myItems.push( "<li>item " + i + "</li>" );
      }
      
      myList.append( myItems.join( "" ) );

--Manipulating Attributes--

  --jQuery's attribute manipulation capabilities are extensive--

    - the .attr() method also allows for more complex manipulations
      - It can either set an explicit value
      - Or set a value using the return value of a function
    
    -When the function syntax is used, the function receives two arguments:
      - The zero-based index of the element whose attribute is being changed
      - The current value of the attribute being changed

        // Manipulating a single attribute.
        $( "#myDiv a:first" ).attr( "href", "newDestination.html" );

        // Manipulating multiple attributes.
        $( "#myDiv a:first" ).attr({
            href: "newDestination.html",
            rel: "nofollow"
        });

        // Using a function to determine an attribute's new value.
        $( "#myDiv a:first" ).attr({
            rel: "nofollow",
            href: function( idx, href ) {
                return "/new/" + href;
            }
        });
        $( "#myDiv a:first" ).attr( "href", function( idx, href ) {
            return "/new/" + href;
        });

//========================================================
//========================================================

##Traversing

--Description--
  - Once you've made an initial selection with jQuery, you can traverse deeper into what was just selected.

  - Traversing can be broken down into three basic parts:
    1. Parents
    2. Children
    3. Siblings

  - Link for available traversal methods
    http://api.jquery.com/category/traversing/

--Example--

  <div class="grandparent">
    <div class="parent">
      <div class="child">
        <span class="subchild"></span>
      </div>
    </div>
     <div class="surrogateParent1"></div>
    <div class="surrogateParent2"></div>
    </div>

--Parents--

  - The methods for finding the parents from a selection include:
    - .parent(), .parents(), .parentsUntil(), and .closest()

      // Selecting an element's direct parent:
        // returns [ div.child ]
        $( "span.subchild" ).parent();
      
      // Selecting all the parents of an element that match a given selector:
        // returns [ div.parent ]
        $( "span.subchild" ).parents( "div.parent" );
        // returns [ div.child, div.parent, div.grandparent ]
        $( "span.subchild" ).parents();
      
      // Selecting all the parents of an element up to, but *not including* the selector:
        // returns [ div.child, div.parent ]
        $( "span.subchild" ).parentsUntil( "div.grandparent" );
      
      // Selecting the closest parent, note that only one parent will be selected
      // and that the initial element itself is included in the search:
        // returns [ div.child ]
        $( "span.subchild" ).closest( "div" );
        // !!returns [ div.child ] as the selector is also included in the search:
        $( "div.child" ).closest( "div" );

--Children--

  - The methods for finding child elements from a selection include:
      - .children() and .find()
    - The difference between these methods lies in how far into the child structure the selection is made
      - .children() only operates on direct child nodes
      - .find() can traverse recursively into children, children of those children, and so on

      // Selecting an element's direct children:
        // returns [ div.parent, div.surrogateParent1, div.surrogateParent2 ]
        $( "div.grandparent" ).children( "div" );
      
      // Finding all elements within a selection that match the selector:
        // returns [ div.child, div.parent, div.surrogateParent1, div.surrogateParent2 ]
        $( "div.grandparent" ).find( "div" );

--Siblings--

  --There are a few basic methods as far as the direction of traversal is concerned--
      - find previous elements with .prev()
      - next elements with .next()
      - both with .siblings()
    - There are also a few other methods that build onto these basic methods: 
      - .nextAll(), .nextUntil(), .prevAll() and .prevUntil()

        // Selecting a next sibling of the selectors:
          // returns [ div.surrogateParent1 ]
          $( "div.parent" ).next();
        
        // Selecting a prev sibling of the selectors:
          // returns [] as No sibling exists before div.parent
          $( "div.parent" ).prev();
        
        // Selecting all the next siblings of the selector:
          // returns [ div.surrogateParent1, div.surrogateParent2 ]
          $( "div.parent" ).nextAll();
          // returns [ div.surrogateParent1 ]
          $( "div.parent" ).nextAll().first();
          // returns [ div.surrogateParent2 ]
          $( "div.parent" ).nextAll().last();
        
        // Selecting all the previous siblings of the selector:
          // returns [ div.surrogateParent1, div.parent ]
          $( "div.surrogateParent2" ).prevAll();
          // returns [ div.surrogateParent1 ]
          $( "div.surrogateParent2" ).prevAll().first();
          // returns [ div.parent ]
          $( "div.surrogateParent2" ).prevAll().last();

      - Use .siblings() to select all siblings:

        // Selecting an element's siblings in both directions that matches the given selector:
          // returns [ div.surrogateParent1, div.surrogateParent2 ]
          $( "div.parent" ).siblings();
          // returns [ div.parent, div.surrogateParent2 ]
          $( "div.surrogateParent1" ).siblings();
        
--Be cautious when traversing long distances in documents--
  - complex traversal makes it imperative that the document's structure remain the same
  - which is difficult to guarantee even if you're the one creating the whole application from server to client
  - One- or two-step traversal is fine, but it's best to avoid traversals that go from one container to another.

//========================================================
//========================================================